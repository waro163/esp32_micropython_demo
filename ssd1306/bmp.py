import machine as ma
import time
import ssd1306

i2c = ma.I2C(0)#scl=Pin(18),sda=Pin(19)

oled_width=128
oled_high = 64
oled = ssd1306.SSD1306_I2C(oled_width,oled_high,i2c)

# data e.g. 0x1a -> "00011010"
def convert_hex_to_bin_str(data):
    tmp = bin(data).lstrip("0b")
    size = len(tmp)
    res = "0"*(8-size)+tmp
    return res

# [0x01, 0x1a,...] -> "0000 0001 0001 1010..."
def group_str(li):
    s = time.ticks_us()
    tmp = ""
    for item in li:
        tmp += convert_hex_to_bin_str(item)
    e = time.ticks_us()
    print(e-s)
    return tmp

def group_str1(li):
    # s = time.ticks_us()
    size = len(li)*8
    sum =0
    for item in li:
        sum=sum<<8
        sum+=item
    res = bin(sum).lstrip("0b")
    length = len(res)
    res = "0"*(size-length)+res
    # e = time.ticks_us()
    # print(e-s)
    return res
        

# 逐行式
def bmp_show(data, width=12):
    high = len(data)/width
    for line in range(high):
        begin = width*line
        end = width*(line+1)
        tmp = data[begin:end]
        status = group_str1(tmp)
        for i in range(len(status)):
            oled.pixel(i, line, int(status[i]))
    oled.show()

def bmp_show0(data, high=64):
    width = len(data)/high
    for line in range(high):
        begin = width*line
        end = width*(line+1)
        tmp = data[begin:end]
        status = group_str1(tmp)
        for i in range(len(status)):
            oled.pixel(line, i, int(status[i]))
    oled.show()

# 行列式
def bmp_show_1(data, high=16):
    width = len(data)/high
    for i in range(width):
        for j in range(high):
            num = i*high+j
            res = convert_hex_to_bin_str(data[num])
            for x in range(8):
                oled.pixel(i*8+x,j, int(res[x]))
    oled.show()

data = [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFC,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xE0,0x1E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0xC7,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x07,0xF9,0x83,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x1F,0xFF,0xC3,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x3F,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x9E,0x7F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x9C,0xFF,0xFF,0xE0,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xBC,0xFF,0xFF,0xF0,0x06,0xC0,0x00,0x00,0x00,0x00,0x00,0x03,0x3D,0xFF,0xFF,0xF0,0x03,0xC0,0x00,0x00,0x00,0x00,0x00,0x03,0x3D,0xFF,0xFF,0xF0,0x07,0x80,0x00,0x00,0x00,0x00,0x00,0x03,0x31,
0xFF,0xFF,0xF0,0x06,0x80,0x00,0x00,0x00,0x00,0x00,0x03,0x31,0xFF,0xFF,0xF0,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x03,0x31,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x31,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x99,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x98,0xFF,0xFF,0xE0,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDC,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xCC,0x7F,0xFF,0xDE,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x66,0x3F,0xFF,0xD7,0x30,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x37,0x1F,0xFF,0x9F,0x98,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x3B,0xCF,0xFF,0x0E,0xD8,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x18,0xF1,0xFC,0x07,0x6C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x7F,0xF8,0x03,0xF6,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x0C,0x0F,0xC0,0x03,0xD7,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00,0x01,0x80,0x0F,0xDB,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00,0x01,0xB0,0x0D,0xF1,0x80,0x00,0x00,0x00,0x00,0x00,0x18,0x00,
0x01,0xB0,0x0D,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xB0,0x8F,0xE0,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD9,0xE2,0xF0,0x01,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDB,0x61,0xBC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xCF,0x61,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x7F,0xE0,0x1E,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x7E,0xB2,0x1A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x23,0xF3,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0xC3,0xBE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xC1,0xF6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x0F,0x71,0xEE,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x60,0x00,0x01,0xBF,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0xDF,0x73,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC4,0xC1,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xC0,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,#"G:\3_spaceman_bmp\spaceman _31.bmp",0*/
# (94 X 64 )*/
]

bmp_show(data)